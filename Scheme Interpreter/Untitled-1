(define A
  (lambda (k x1 x2 x3 x4 x5)
    (letrec ((B
              (lambda ()
                (begin
                  (set! k (- k 1))
                  (A k B x1 x2 x3 x4)))))
      (if (<= k 0)
          (+ (x4) (x5))
          (B)))))


(let* ((x 2)) (+ x 1))
(let* ((x 1)(x 2)) x)
(let* ((x 2) (y 3)) y)
(let* ((x 2) (y x) (z y) (a z)) (list a z y x))

(define x 3)
(let* ((x 2)) (set! x 5) x)

(let* ([x (* 5.0 5.0)]
       [y (- x (* 4.0 4.0))])
  y)

(let ([x 0] [y 1])
  (let* ([x y] [y x])
    (list x y)))

(letrec ((x 2) (y x)) y)
(letrec ([sum (lambda (x)
                (if (null? x)
                    0
                    (+ (car x) (sum (cdr x)))))])

(sum (quote (2 3 4))))

(define x 3)
(letrec ((x 2)) (set! x 5) x)

;;error
;;our error does not handle the first two error cases for letrec: it did not report error!
;;first error case
(define x 2)
(letrec ((y 2) (x x)) y)

;;second error case
(define y 1)
(define x 1)
(letrec ((y x) (x y)) x)
(letrec ((y 1) (x y)) x)

;;error cases that correctly crash
(letrec ((x 2) (x 3)) y)